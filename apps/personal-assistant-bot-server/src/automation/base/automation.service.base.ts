/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Automation as PrismaAutomation,
  User as PrismaUser,
} from "@prisma/client";

export class AutomationServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.AutomationCountArgs, "select">
  ): Promise<number> {
    return this.prisma.automation.count(args);
  }

  async automations<T extends Prisma.AutomationFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.AutomationFindManyArgs>
  ): Promise<PrismaAutomation[]> {
    return this.prisma.automation.findMany<Prisma.AutomationFindManyArgs>(args);
  }
  async automation<T extends Prisma.AutomationFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.AutomationFindUniqueArgs>
  ): Promise<PrismaAutomation | null> {
    return this.prisma.automation.findUnique(args);
  }
  async createAutomation<T extends Prisma.AutomationCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.AutomationCreateArgs>
  ): Promise<PrismaAutomation> {
    return this.prisma.automation.create<T>(args);
  }
  async updateAutomation<T extends Prisma.AutomationUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.AutomationUpdateArgs>
  ): Promise<PrismaAutomation> {
    return this.prisma.automation.update<T>(args);
  }
  async deleteAutomation<T extends Prisma.AutomationDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.AutomationDeleteArgs>
  ): Promise<PrismaAutomation> {
    return this.prisma.automation.delete(args);
  }

  async getUser(parentId: string): Promise<PrismaUser | null> {
    return this.prisma.automation
      .findUnique({
        where: { id: parentId },
      })
      .user();
  }
}
