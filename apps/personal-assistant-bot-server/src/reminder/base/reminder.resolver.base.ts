/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Reminder } from "./Reminder";
import { ReminderCountArgs } from "./ReminderCountArgs";
import { ReminderFindManyArgs } from "./ReminderFindManyArgs";
import { ReminderFindUniqueArgs } from "./ReminderFindUniqueArgs";
import { CreateReminderArgs } from "./CreateReminderArgs";
import { UpdateReminderArgs } from "./UpdateReminderArgs";
import { DeleteReminderArgs } from "./DeleteReminderArgs";
import { User } from "../../user/base/User";
import { ReminderService } from "../reminder.service";
@graphql.Resolver(() => Reminder)
export class ReminderResolverBase {
  constructor(protected readonly service: ReminderService) {}

  async _remindersMeta(
    @graphql.Args() args: ReminderCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Reminder])
  async reminders(
    @graphql.Args() args: ReminderFindManyArgs
  ): Promise<Reminder[]> {
    return this.service.reminders(args);
  }

  @graphql.Query(() => Reminder, { nullable: true })
  async reminder(
    @graphql.Args() args: ReminderFindUniqueArgs
  ): Promise<Reminder | null> {
    const result = await this.service.reminder(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Reminder)
  async createReminder(
    @graphql.Args() args: CreateReminderArgs
  ): Promise<Reminder> {
    return await this.service.createReminder({
      ...args,
      data: {
        ...args.data,

        user: args.data.user
          ? {
              connect: args.data.user,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => Reminder)
  async updateReminder(
    @graphql.Args() args: UpdateReminderArgs
  ): Promise<Reminder | null> {
    try {
      return await this.service.updateReminder({
        ...args,
        data: {
          ...args.data,

          user: args.data.user
            ? {
                connect: args.data.user,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Reminder)
  async deleteReminder(
    @graphql.Args() args: DeleteReminderArgs
  ): Promise<Reminder | null> {
    try {
      return await this.service.deleteReminder(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => User, {
    nullable: true,
    name: "user",
  })
  async getUser(@graphql.Parent() parent: Reminder): Promise<User | null> {
    const result = await this.service.getUser(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
